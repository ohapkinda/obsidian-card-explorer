import { App, Plugin, WorkspaceLeaf, ItemView, TFile, TFolder } from "obsidian";

const VIEW_TYPE_CARDS = "card-explorer";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
interface FileSystemItem {
  name: string;
  path: string;
  type: 'file' | 'folder';
  children?: FileSystemItem[];
  isExpanded?: boolean;
  file?: TFile;
  folder?: TFolder;
}

export default class CardExplorerPlugin extends Plugin {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  async onload() {
    this.registerView(
      VIEW_TYPE_CARDS,
      (leaf) => new CardExplorerView(leaf)
    );

    this.addRibbonIcon("layout-grid", "Open Card Explorer", () => {
      this.activateView();
    });
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Card Explorer
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
   */
  async activateView() {
    const leaf = this.app.workspace.getRightLeaf(false);
    await leaf.setViewState({ type: VIEW_TYPE_CARDS, active: true });
    this.app.workspace.revealLeaf(leaf);
  }
}

class CardExplorerView extends ItemView {
  private fileSystemData: FileSystemItem[] = [];
  private currentFolder: FileSystemItem | null = null;
  private allFiles: FileSystemItem[] = [];
  private cardsContainer: HTMLElement | null = null;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è Card Explorer
   * @param leaf - –ª–∏—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  constructor(leaf: WorkspaceLeaf) {
    super(leaf);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  getViewType() {
    return VIEW_TYPE_CARDS;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
   */
  getDisplayText() {
    return "Card Explorer";
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞ –∏–∫–æ–Ω–æ–∫ Obsidian
   */
  getIcon() {
    return "layout-grid";
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * –°–æ–∑–¥–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –¥–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫ + –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
   */
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    await this.loadFileSystem();
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–≤—É–º—è –ø–∞–Ω–µ–ª—è–º–∏
    const mainContainer = container.createDiv("main-container");
    
    // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫
    const leftPanel = mainContainer.createDiv("left-panel");
    const treeContainer = leftPanel.createDiv("file-tree-container");
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"
    const showAllButton = leftPanel.createDiv("show-all-button");
    showAllButton.textContent = "üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã";
    showAllButton.onclick = () => {
      this.currentFolder = null;
      this.renderFileCards();
    };
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    this.renderFolderTree(treeContainer, this.fileSystemData, 0);
    
    // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
    const rightPanel = mainContainer.createDiv("right-panel");
    this.cardsContainer = rightPanel.createDiv("cards-container");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.renderFileCards();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Obsidian
   */
  private async loadFileSystem() {
    this.fileSystemData = [];
    this.allFiles = [];
    const rootFolder = this.app.vault.getRoot();
    
    if (rootFolder) {
      await this.buildFileSystemTree(rootFolder, this.fileSystemData);
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
   * @param folder - –ø–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param parentArray - –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private async buildFileSystemTree(folder: TFolder, parentArray: FileSystemItem[]) {
    const children = folder.children;
    
    if (!children) return;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    const sortedChildren = children.sort((a, b) => {
      if (a instanceof TFolder && b instanceof TFile) return -1;
      if (a instanceof TFile && b instanceof TFolder) return 1;
      return a.name.localeCompare(b.name);
    });

    for (const child of sortedChildren) {
      if (child instanceof TFolder) {
        const folderItem: FileSystemItem = {
          name: child.name,
          path: child.path,
          type: 'folder',
          children: [],
          isExpanded: false,
          folder: child
        };
        
        parentArray.push(folderItem);
        await this.buildFileSystemTree(child, folderItem.children!);
      } else if (child instanceof TFile && child.extension === 'md') {
        const fileItem: FileSystemItem = {
          name: child.basename,
          path: child.path,
          type: 'file',
          file: child
        };
        
        parentArray.push(fileItem);
        this.allFiles.push(fileItem); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      }
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –ø–∞–ø–æ–∫
   * @param container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param items - –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param level - —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
   */
  private renderFolderTree(container: HTMLElement, items: FileSystemItem[], level: number) {
    for (const item of items) {
      if (item.type === 'folder') {
        const itemElement = container.createDiv("tree-item");
        itemElement.style.paddingLeft = `${level * 20}px`;
        this.renderFolder(itemElement, item, level);
      }
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ—Ç–∫–µ
   */
  private async renderFileCards() {
    if (!this.cardsContainer) return;
    
    this.cardsContainer.empty();
    const grid = this.cardsContainer.createDiv("card-grid");

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    const filesToShow = this.currentFolder 
      ? this.getFilesFromFolder(this.currentFolder)
      : this.allFiles;

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
    for (const file of filesToShow) {
      if (file.file) {
        const content = await this.app.vault.cachedRead(file.file);
        const preview = content.split("\n").slice(0, 3).join(" ");

        const card = grid.createDiv("card");
        card.createEl("h3", { text: file.name });
        card.createEl("p", { text: preview });

        card.onclick = () => this.app.workspace.openLinkText(file.file!.path, "", true);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
   * @param folder - –ø–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
   * @returns –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤
   */
  private getFilesFromFolder(folder: FileSystemItem): FileSystemItem[] {
    const files: FileSystemItem[] = [];
    
    if (folder.children) {
      for (const child of folder.children) {
        if (child.type === 'file') {
          files.push(child);
        } else if (child.type === 'folder') {
          files.push(...this.getFilesFromFolder(child));
        }
      }
    }
    
    return files;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞–ø–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
   * @param element - HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param folder - –¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
   * @param level - —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
   */
  private renderFolder(element: HTMLElement, folder: FileSystemItem, level: number) {
    const folderHeader = element.createDiv("folder-header");
    
    // –ò–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏
    const icon = folderHeader.createSpan("folder-icon");
    icon.textContent = folder.isExpanded ? "üìÇ" : "üìÅ";
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    const name = folderHeader.createSpan("folder-name");
    name.textContent = folder.name;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    folderHeader.onclick = () => {
      folder.isExpanded = !folder.isExpanded;
      this.refreshFolderTree();
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã)
    folderHeader.oncontextmenu = (e) => {
      e.preventDefault();
      this.currentFolder = folder;
      this.renderFileCards();
    };

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
    if (folder.isExpanded && folder.children) {
      const childrenContainer = element.createDiv("folder-children");
      this.renderFolderTree(childrenContainer, folder.children, level + 1);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ñ–∞–π–ª —Å –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   * @param element - HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param file - –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
   */
  private async renderFile(element: HTMLElement, file: FileSystemItem) {
    const fileHeader = element.createDiv("file-header");
    
    // –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞
    const icon = fileHeader.createSpan("file-icon");
    icon.textContent = "üìÑ";
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const name = fileHeader.createSpan("file-name");
    name.textContent = file.name;

    // –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if (file.file) {
      try {
        const content = await this.app.vault.cachedRead(file.file);
        const preview = content.split("\n").slice(0, 2).join(" ").substring(0, 100);
        
        const previewElement = element.createDiv("file-preview");
        previewElement.textContent = preview + (preview.length >= 100 ? "..." : "");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
    fileHeader.onclick = () => {
      if (file.file) {
        this.app.workspace.openLinkText(file.file.path, "", true);
      }
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫
   */
  private refreshFolderTree() {
    const leftPanel = this.containerEl.querySelector(".left-panel");
    if (leftPanel) {
      const treeContainer = leftPanel.querySelector(".file-tree-container");
      if (treeContainer) {
        treeContainer.empty();
        this.renderFolderTree(treeContainer as HTMLElement, this.fileSystemData, 0);
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
   */
  private async refreshView() {
    const container = this.containerEl.children[1];
    container.empty();
    
    const mainContainer = container.createDiv("main-container");
    
    // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫
    const leftPanel = mainContainer.createDiv("left-panel");
    const treeContainer = leftPanel.createDiv("file-tree-container");
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"
    const showAllButton = leftPanel.createDiv("show-all-button");
    showAllButton.textContent = "üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã";
    showAllButton.onclick = () => {
      this.currentFolder = null;
      this.renderFileCards();
    };
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    this.renderFolderTree(treeContainer, this.fileSystemData, 0);
    
    // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
    const rightPanel = mainContainer.createDiv("right-panel");
    this.cardsContainer = rightPanel.createDiv("cards-container");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    this.renderFileCards();
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  async onClose() {
    // –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }
}
