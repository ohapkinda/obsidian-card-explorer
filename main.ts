import { App, Plugin, WorkspaceLeaf, ItemView, TFile, TFolder, Modal, Setting, Menu, Notice } from "obsidian";

const VIEW_TYPE_CARDS = "card-explorer";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
interface FileSystemItem {
  name: string;
  path: string;
  type: 'file' | 'folder';
  children?: FileSystemItem[];
  isExpanded?: boolean;
  file?: TFile;
  folder?: TFolder;
}


// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
class RenameModal extends Modal {
  private newName: string;
  private onSubmit: (newName: string) => void;

  constructor(app: App, currentName: string, onSubmit: (newName: string) => void) {
    super(app);
    this.newName = currentName;
    this.onSubmit = onSubmit;
  }

  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Rename" });

    new Setting(contentEl)
      .setName("New name")
      .addText(text => {
        text
          .setValue(this.newName)
          .onChange(value => this.newName = value);
        text.inputEl.focus();
        text.inputEl.select();
      });

    new Setting(contentEl)
      .addButton(btn => btn
        .setButtonText("Cancel")
        .onClick(() => this.close())
      )
      .addButton(btn => btn
        .setButtonText("Rename")
        .setCta()
        .onClick(() => {
          this.onSubmit(this.newName);
          this.close();
        })
      );
  }

  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
class CreateModal extends Modal {
  private name: string;
  private onSubmit: (name: string) => void;
  private title: string;
  private placeholder: string;

  constructor(app: App, title: string, placeholder: string, onSubmit: (name: string) => void) {
    super(app);
    this.name = "";
    this.onSubmit = onSubmit;
    this.title = title;
    this.placeholder = placeholder;
  }

  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });

    new Setting(contentEl)
      .setName("Name")
      .addText(text => text
        .setPlaceholder(this.placeholder)
        .onChange(value => this.name = value)
        .inputEl.focus()
      );

    new Setting(contentEl)
      .addButton(btn => btn
        .setButtonText("Cancel")
        .onClick(() => this.close())
      )
      .addButton(btn => btn
        .setButtonText("Create")
        .setCta()
        .onClick(() => {
          this.onSubmit(this.name);
          this.close();
        })
      );
  }

  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

export default class CardExplorerPlugin extends Plugin {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  async onload() {
    this.registerView(
      VIEW_TYPE_CARDS,
      (leaf) => new CardExplorerView(leaf)
    );

    this.addRibbonIcon("layout-grid", "Open Cards Explorer", () => {
      this.activateView();
    });
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Card Explorer
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
   */
  async activateView() {
    const leaf = this.app.workspace.getRightLeaf(false);
    await leaf.setViewState({ type: VIEW_TYPE_CARDS, active: true });
    this.app.workspace.revealLeaf(leaf);
  }
}

class CardExplorerView extends ItemView {
  private fileSystemData: FileSystemItem[] = [];
  private expandedFolders: Set<string> = new Set();
  private folderColors: Map<string, string> = new Map();

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è Card Explorer
   * @param leaf - –ª–∏—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  constructor(leaf: WorkspaceLeaf) {
    super(leaf);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  getViewType() {
    return VIEW_TYPE_CARDS;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
   */
  getDisplayText() {
    return "Cards Explorer";
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞ –∏–∫–æ–Ω–æ–∫ Obsidian
   */
  getIcon() {
    return "layout-grid";
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø–∞–ø–∫–∏ + –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –¥–µ—Ä–µ–≤–µ
   */
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    await this.loadFileSystem();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –µ–¥–∏–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const treeContainer = container.createDiv("unified-tree-container");
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø–∞–ø–∫–∏ + –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
    this.renderUnifiedTree(treeContainer, this.fileSystemData, 0);
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Obsidian
   */
  private async loadFileSystem() {
    this.fileSystemData = [];
    const rootFolder = this.app.vault.getRoot();
    
    if (rootFolder) {
      await this.buildFileSystemTree(rootFolder, this.fileSystemData);
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
   * @param folder - –ø–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param parentArray - –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private async buildFileSystemTree(folder: TFolder, parentArray: FileSystemItem[]) {
    const children = folder.children;
    
    if (!children) return;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    const sortedChildren = children.sort((a, b) => {
      if (a instanceof TFolder && b instanceof TFile) return -1;
      if (a instanceof TFile && b instanceof TFolder) return 1;
      return a.name.localeCompare(b.name);
    });

    for (const child of sortedChildren) {
      if (child instanceof TFolder) {
        const folderItem: FileSystemItem = {
          name: child.name,
          path: child.path,
          type: 'folder',
          children: [],
          isExpanded: this.expandedFolders.has(child.path),
          folder: child
        };
        
        parentArray.push(folderItem);
        await this.buildFileSystemTree(child, folderItem.children!);
      } else if (child instanceof TFile) {
        const fileItem: FileSystemItem = {
          name: child.basename,
          path: child.path,
          type: 'file',
          file: child
        };
        
        parentArray.push(fileItem);
      }
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø–∞–ø–∫–∏ + –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
   * @param container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param items - –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param level - —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
   */
  private async renderUnifiedTree(container: HTMLElement, items: FileSystemItem[], level: number) {
    for (const item of items) {
      if (item.type === 'folder') {
        // –†–µ–Ω–¥–µ—Ä–∏–º –ø–∞–ø–∫—É
        const folderElement = container.createDiv("folder-container");
        folderElement.setAttribute('data-level', level.toString());
        await this.renderFolderWithContent(folderElement, item, level);
      }
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞–ø–∫—É —Å –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: –ø–æ–¥–ø–∞–ø–∫–∏ + –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
   * @param container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–ø–∫–∏
   * @param folder - –¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
   * @param level - —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
   */
  private async renderFolderWithContent(container: HTMLElement, folder: FileSystemItem, level: number) {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–ø–∫–∏
    const folderHeader = container.createDiv("folder-header");
    
    // –ò–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏
    const icon = folderHeader.createSpan("folder-icon");
    icon.textContent = folder.isExpanded ? "üìÇ" : "üìÅ";
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    const name = folderHeader.createSpan("folder-name");
    name.textContent = folder.name;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    folderHeader.onclick = () => {
      folder.isExpanded = !folder.isExpanded;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Set
      if (folder.isExpanded) {
        this.expandedFolders.add(folder.path);
      } else {
        this.expandedFolders.delete(folder.path);
      }
      
      this.refreshView();
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    folderHeader.oncontextmenu = (e) => {
      e.preventDefault();
      this.showContextMenu(e, folder);
    };

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
    if (folder.isExpanded && folder.children) {
      const contentContainer = container.createDiv("folder-content");
      
      // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ–¥–ø–∞–ø–∫–∏
      const subfolders = folder.children.filter(child => child.type === 'folder');
      if (subfolders.length > 0) {
        const subfoldersContainer = contentContainer.createDiv("subfolders-container");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∞–ø–æ–∫
        subfoldersContainer.addClass("subfolders-with-border");
        
        for (const subfolder of subfolders) {
          const subfolderElement = subfoldersContainer.createDiv("folder-container");
          subfolderElement.setAttribute('data-level', (level + 1).toString());
          await this.renderFolderWithContent(subfolderElement, subfolder, level + 1);
        }
      }
      
      // –ó–∞—Ç–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
      const files = folder.children.filter(child => child.type === 'file');
      if (files.length > 0) {
        const filesContainer = contentContainer.createDiv("files-container");
        
        // –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        const cardsGrid = filesContainer.createDiv("card-grid-full-width");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∞–π–ª–æ–≤
        cardsGrid.addClass("cards-with-border");
        
        for (const file of files) {
          if (file.file) {
            const card = cardsGrid.createDiv("card");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            const fileIcon = this.getFileIcon(file.file.extension);
            card.createEl("h3", { text: `${fileIcon} ${file.name}` });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            if (this.isTextFile(file.file.extension)) {
              try {
                const content = await this.app.vault.cachedRead(file.file);
                const preview = content.split("\n").slice(0, 3).join(" ");
                card.createEl("p", { text: preview });
              } catch (error) {
                card.createEl("p", { text: "Failed to read file" });
              }
            } else {
              card.createEl("p", { text: `${file.file.extension.toUpperCase()} file` });
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
            card.onclick = (e) => {
              if (file.file) {
                this.openFileInSystem(file.file, e);
              }
            };

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
            card.oncontextmenu = (e) => {
              e.preventDefault();
              this.showFileContextMenu(e, file);
            };
          }
        }
      }
    }
  }



  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ñ–∞–π–ª —Å –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   * @param element - HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   * @param file - –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
   */
  private async renderFile(element: HTMLElement, file: FileSystemItem) {
    const fileHeader = element.createDiv("file-header");
    
    // –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞
    const icon = fileHeader.createSpan("file-icon");
    icon.textContent = "üìÑ";
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const name = fileHeader.createSpan("file-name");
    name.textContent = file.name;

    // –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if (file.file) {
      try {
        const content = await this.app.vault.cachedRead(file.file);
        const preview = content.split("\n").slice(0, 2).join(" ").substring(0, 100);
        
        const previewElement = element.createDiv("file-preview");
        previewElement.textContent = preview + (preview.length >= 100 ? "..." : "");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
    fileHeader.onclick = () => {
      if (file.file) {
        this.app.workspace.openLinkText(file.file.path, "", true);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    fileHeader.oncontextmenu = (e) => {
      e.preventDefault();
      this.showFileContextMenu(e, file);
    };

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ —Å–∞–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ —Ñ–∞–π–ª–∞
    element.oncontextmenu = (e) => {
      e.preventDefault();
      this.showFileContextMenu(e, file);
    };
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ñ–∞–π–ª–∞
   * @param event - —Å–æ–±—ã—Ç–∏–µ –º—ã—à–∏
   * @param file - —Ñ–∞–π–ª –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—é
   */
  private showFileContextMenu(event: MouseEvent, file: FileSystemItem) {
    const menu = new Menu();
    
    // Add actions for file
    menu.addItem((item) => {
      item.setTitle("Open file")
        .setIcon("file-text")
        .onClick(() => this.openFile(file));
    });
    
    menu.addItem((item) => {
      item.setTitle("Rename")
        .setIcon("edit")
        .onClick(() => this.renameFile(file));
    });
    
    menu.addItem((item) => {
      item.setTitle("Duplicate")
        .setIcon("copy")
        .onClick(() => this.duplicateFile(file));
    });
    
    menu.addItem((item) => {
      item.setTitle("Move")
        .setIcon("folder")
        .onClick(() => this.moveFile(file));
    });
    
    menu.addSeparator();
    
    menu.addItem((item) => {
      item.setTitle("Delete file")
        .setIcon("trash")
        .onClick(() => this.deleteFile(file));
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    menu.showAtPosition({ x: event.clientX, y: event.clientY });
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–∞–ø–∫–∏
   * @param event - —Å–æ–±—ã—Ç–∏–µ –º—ã—à–∏
   * @param folder - –ø–∞–ø–∫–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—é
   */
  private showContextMenu(event: MouseEvent, folder: FileSystemItem) {
    const menu = new Menu();
    
    // Add actions for folder
    menu.addItem((item) => {
      item.setTitle("Rename")
        .setIcon("edit")
        .onClick(() => this.renameFolder(folder));
    });
    
    menu.addSeparator();
    
    menu.addItem((item) => {
      item.setTitle("Create folder")
        .setIcon("folder-plus")
        .onClick(() => this.createNewFolder(folder));
    });
    
    menu.addItem((item) => {
      item.setTitle("Create file")
        .setIcon("file-plus")
        .onClick(() => this.createNewFile(folder));
    });
    
    menu.addSeparator();
    
    menu.addItem((item) => {
      item.setTitle("Delete folder")
        .setIcon("trash")
        .onClick(() => this.deleteFolder(folder));
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    menu.showAtPosition({ x: event.clientX, y: event.clientY });
  }



  /**
   * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É
   * @param folder - –ø–∞–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
   */
  private async renameFolder(folder: FileSystemItem) {
    new RenameModal(this.app, folder.name, async (newName) => {
      if (newName && newName !== folder.name && newName.trim()) {
        try {
          const newPath = folder.path.replace(folder.name, newName.trim());
          await this.app.vault.rename(folder.folder!, newPath);
          this.refreshView();
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏:", error);
          alert("Failed to rename folder");
        }
      }
    }).open();
  }


  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É
   * @param parentFolder - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞
   */
  private async createNewFolder(parentFolder: FileSystemItem) {
    new CreateModal(this.app, "Create folder", "Folder name", async (folderName) => {
      if (folderName && folderName.trim()) {
        try {
          const newPath = `${parentFolder.path}/${folderName.trim()}`;
          await this.app.vault.createFolder(newPath);
          this.refreshView();
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", error);
          alert("Failed to create folder");
        }
      }
    }).open();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª
   * @param parentFolder - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞
   */
  private async createNewFile(parentFolder: FileSystemItem) {
    new CreateModal(this.app, "Create file", "File name (with .md)", async (fileName) => {
      if (fileName && fileName.trim()) {
        try {
          const fileNameWithExt = fileName.endsWith('.md') ? fileName : `${fileName}.md`;
          const newPath = `${parentFolder.path}/${fileNameWithExt}`;
          await this.app.vault.create(newPath, "");
          this.refreshView();
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
          alert("Failed to create file");
        }
      }
    }).open();
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É
   * @param folder - –ø–∞–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  private async deleteFolder(folder: FileSystemItem) {
    const confirmed = confirm(`Are you sure you want to delete folder "${folder.name}" and all its contents?`);
    if (confirmed) {
      try {
        await this.app.fileManager.trashFile(folder.folder!);
        this.refreshView();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏:", error);
        alert("Failed to delete folder");
      }
    }
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª
   * @param file - —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
   */
  private openFile(file: FileSystemItem) {
    if (file.file) {
      this.app.workspace.openLinkText(file.file.path, "", true);
    }
  }

  /**
   * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª
   * @param file - —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
   */
  private async renameFile(file: FileSystemItem) {
    new RenameModal(this.app, file.name, async (newName) => {
      if (newName && newName !== file.name && newName.trim()) {
        try {
          const newPath = file.path.replace(file.name, newName.trim());
          await this.app.vault.rename(file.file!, newPath);
          this.refreshView();
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
          alert("Failed to rename file");
        }
      }
    }).open();
  }

  /**
   * –î—É–±–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª
   * @param file - —Ñ–∞–π–ª –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async duplicateFile(file: FileSystemItem) {
    if (file.file) {
      try {
        const content = await this.app.vault.cachedRead(file.file);
        const newName = `${file.name} (copy)`;
        const newPath = file.path.replace(file.name, newName);
        await this.app.vault.create(newPath, content);
        this.refreshView();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
        alert("Failed to duplicate file");
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª
   * @param file - —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
   */
  private async moveFile(file: FileSystemItem) {
    new CreateModal(this.app, "Move file", "New path", async (newPath) => {
      if (newPath && newPath !== file.path && newPath.trim()) {
        try {
          await this.app.vault.rename(file.file!, newPath.trim());
          this.refreshView();
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
          alert("Failed to move file");
        }
      }
    }).open();
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª
   * @param file - —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  private async deleteFile(file: FileSystemItem) {
    const confirmed = confirm(`Are you sure you want to delete file "${file.name}"?`);
    if (confirmed) {
      try {
        await this.app.fileManager.trashFile(file.file!);
        this.refreshView();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
        alert("Failed to delete file");
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø–∞–ø–∫–∏ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
   * @param folderPath - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
   * @returns —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSS
   */
  private getFolderColor(folderPath: string): string {
    if (!this.folderColors.has(folderPath)) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –ø—É—Ç–∏
      const colors = [
        '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
        '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
        '#F8C471', '#82E0AA', '#F1948A', '#85C1E9', '#D7BDE2'
      ];
      const hash = folderPath.split('').reduce((a, b) => {
        a = ((a << 5) - a) + b.charCodeAt(0);
        return a & a;
      }, 0);
      const colorIndex = Math.abs(hash) % colors.length;
      this.folderColors.set(folderPath, colors[colorIndex]);
    }
    return this.folderColors.get(folderPath)!;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
   * @param extension - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   * @returns true –µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π
   */
  private isTextFile(extension: string): boolean {
    const textExtensions = ['md', 'txt', 'json', 'js', 'ts', 'css', 'html', 'xml', 'yaml', 'yml', 'csv', 'log'];
    return textExtensions.indexOf(extension.toLowerCase()) !== -1;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
   * @param extension - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   * @returns –∏–∫–æ–Ω–∫–∞ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏
   */
  private getFileIcon(extension: string): string {
    const ext = extension.toLowerCase();
    const iconMap: { [key: string]: string } = {
      'md': 'üìù',
      'txt': 'üìÑ',
      'pdf': 'üìï',
      'doc': 'üìò',
      'docx': 'üìò',
      'xls': 'üìä',
      'xlsx': 'üìä',
      'ppt': 'üìã',
      'pptx': 'üìã',
      'jpg': 'üñºÔ∏è',
      'jpeg': 'üñºÔ∏è',
      'png': 'üñºÔ∏è',
      'gif': 'üñºÔ∏è',
      'svg': 'üñºÔ∏è',
      'mp4': 'üé¨',
      'avi': 'üé¨',
      'mov': 'üé¨',
      'mp3': 'üéµ',
      'wav': 'üéµ',
      'zip': 'üì¶',
      'rar': 'üì¶',
      '7z': 'üì¶',
      'js': 'üìú',
      'ts': 'üìú',
      'css': 'üé®',
      'html': 'üåê',
      'json': 'üìã',
      'xml': 'üìã',
      'yaml': 'üìã',
      'yml': 'üìã',
      'csv': 'üìä',
      'log': 'üìã'
    };
    return iconMap[ext] || 'üìÑ';
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @param file - —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
   * @param event - —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
   */
  private openFileInSystem(file: TFile, event?: MouseEvent) {
    // –î–ª—è Obsidian —Ñ–∞–π–ª–æ–≤ (.md) –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ Obsidian
    if (file.extension === 'md') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç –ª–∏ Cmd (Mac) –∏–ª–∏ Ctrl (Windows/Linux)
      const openInNewTab = event && (event.metaKey || event.ctrlKey);
      this.app.workspace.openLinkText(file.path, "", openInNewTab);
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é
      this.openFileDirectly(file);
    }
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
   * @param file - —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
   */
  private openFileDirectly(file: TFile) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API Obsidian –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
      // –≠—Ç–æ —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
      this.app.workspace.openLinkText(file.path, "", true);
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å
      this.showFilePath(file);
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   * @param file - —Ñ–∞–π–ª
   */
  private showFilePath(file: TFile) {
    const message = `File: ${file.path}\n\nCopy this path and open in system application.`;
    alert(message);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    if (navigator.clipboard) {
      navigator.clipboard.writeText(file.path).catch(() => {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
   */
  private async refreshView() {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    await this.loadFileSystem();
    
    const container = this.containerEl.children[1];
    container.empty();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –µ–¥–∏–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const treeContainer = container.createDiv("unified-tree-container");
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø–∞–ø–∫–∏ + –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤
    this.renderUnifiedTree(treeContainer, this.fileSystemData, 0);
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  async onClose() {
    // –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }
}
